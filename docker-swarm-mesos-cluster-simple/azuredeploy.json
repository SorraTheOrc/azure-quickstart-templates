  {
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "storageAccountName": {
        "type": "string",
        "metadata": {
          "description": "Name for the Storage Account where the Virtual Machine's disks will be placed. If the storage account does not aleady exist in this Resource Group it will be created."
        }
      },
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "User name for each Virtual Machine (master and nodes)."
        }
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Password for each Virtual Machine (master and nodes)."
        }
      },
      "dnsNameForPublicIP": {
        "type": "string",
        "metadata": {
          "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
        }
      },
      "nodeCount": {
        "type": "int",
        "defaultValue": 3,
        "metadata": {
          "description": "Number of nodes in the cluster"
        }
      }
    },
    "variables": {
      "location": "East US",
      "storageAccountType": "Standard_LRS",
      "publicIPAddressName": "acsPublicIP",
      "publicIPAddressType": "Dynamic",
      "nicName": "acsVMNic",
      "virtualNetworkName": "acsVNET",
      "subnetName": "subnet",
      "addressPrefix": "10.0.0.0/16",
      "subnetPrefix": "10.0.0.0/24",
      "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
      "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
      "vmName": "acs-",
      "vmSizeNode": "Standard_D1",
      "imagePublisher": "Canonical",
      "imageOffer": "UbuntuServer",
      "ubuntuOSVersion": "14.04.2-LTS",
      "OSDiskName": "osdiskforlinuxsimple",
      "vmStorageAccountContainerName": "vhds",
      "nsgName": "acsNSG",
      "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]"
    },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[parameters('storageAccountName')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[variables('location')]",
        "properties": {
          "accountType": "[variables('storageAccountType')]"
        }
      },
      {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIPAddressName')]",
        "location": "[variables('location')]",
        "properties": {
          "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
          "dnsSettings": {
            "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
          }
        }
      },
      {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[variables('nsgID')]"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('addressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[variables('subnetName')]",
              "properties": {
                "addressPrefix": "[variables('subnetPrefix')]",
                "networkSecurityGroup": {
                  "id": "[variables('nsgID')]"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('nsgName')]",
        "location": "[variables('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "swarmManagementEndpoint",
              "properties": {
                "description": "Docker swarm endpoint",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "2375",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "mesosDashboard",
              "properties": {
                "description": "Mesos Dashboard",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "5050",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 150,
                "direction": "Inbound"
              }
            },
            {
              "name": "SSH",
              "properties": {
                "description": "SSH endpoint",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 200,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('nicName'), 'master')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/',concat(variables('publicIPAddressName')))]",
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipConfigMaster",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName')))]"
                },
                "subnet": {
                  "id": "[variables('subnetRef')]"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('nicName'),copyIndex())]",
        "location": "[variables('location')]",
        "copy": {
          "name": "nicLoop",
          "count": "[parameters('nodeCount')]"
        },
        "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipConfigNode",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('subnetRef')]"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(variables('vmName'), 'master')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
          "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), 'master')]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A0"
          },
          "osProfile": {
            "computername": "[concat(variables('vmName'), 'master')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('imagePublisher')]",
              "offer": "[variables('imageOffer')]",
              "sku": "[variables('ubuntuOSVersion')]",
              "version": "latest"
            },
            "osDisk": {
              "name": "osdisk",
              "vhd": {
                "uri": "[concat('http://', parameters('storageAccountName'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'), '/', variables('OSDiskName'), 'master-osdisk.vhd')]"
              },
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), 'master'))]"
              }
            ]
          }
        }
      },
      {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(variables('vmName'), copyIndex())]",
        "location": "[variables('location')]",
        "copy": {
          "name": "vmLoop",
          "count": "[parameters('nodeCount')]"
        },
        "dependsOn": [
          "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
          "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex())]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[variables('vmSizeNode')]"
          },
          "osProfile": {
            "computername": "[concat(variables('vmName'), copyIndex())]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('imagePublisher')]",
              "offer": "[variables('imageOffer')]",
              "sku": "[variables('ubuntuOSVersion')]",
              "version": "latest"
            },
            "osDisk": {
              "name": "osdisk",
              "vhd": {
                "uri": "[concat('http://', parameters('storageAccountName'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'), '/', variables('OSDiskName'), copyIndex(), '-osdisk.vhd')]"
              },
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), copyindex()))]"
              }
            ]
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmName'), 'master', '/install')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), 'master')]"
        ],
        "properties": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.2",
          "settings": {
            "fileUris": [
              "https://raw.githubusercontent.com/rgardler/azure-quickstart-templates/mesos/docker-swarm-mesos-cluster-simple/install.sh"
            ],
            "commandToExecute": "sh install.sh"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmName'), 'master', '/configuremaster')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), 'master')]",
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), 'master', '/extensions/install')]"
        ],
        "properties": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.2",
          "settings": {
            "fileUris": [
              "https://raw.githubusercontent.com/rgardler/azure-quickstart-templates/mesos/docker-swarm-mesos-cluster-simple/configure-master.sh"
            ],
            "commandToExecute": "[concat('sh configure-master.sh ', variables('vmName'), 'master Azure Container Service')]"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmName'), copyIndex(), '/install')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[variables('location')]",
        "copy": {
          "name": "extLoop",
          "count": "[parameters('nodeCount')]"
        },
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyIndex())]"
        ],
        "properties": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.2",
          "settings": {
            "fileUris": [
              "https://raw.githubusercontent.com/rgardler/azure-quickstart-templates/mesos/docker-swarm-mesos-cluster-simple/install.sh"
            ],
            "commandToExecute": "sh install.sh"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmName'), copyIndex(), '/configurenode')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[variables('location')]",
        "copy": {
          "name": "extLoop",
          "count": "[parameters('nodeCount')]"
        },
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyIndex())]",
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyIndex(), '/extensions/install')]",
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), 'master', '/extensions/configuremaster')]"
        ],
        "properties": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.2",
          "settings": {
            "fileUris": [
              "https://raw.githubusercontent.com/rgardler/azure-quickstart-templates/mesos/docker-swarm-mesos-cluster-simple/configure-node.sh"
            ],
            "commandToExecute": "[concat('sh configure-node.sh ', variables('vmName'), 'master')]"
          }
        }
      }
    ],
    "outputs": {
      "SwarmManagerHostName": {
        "type": "string",
        "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
      },
      "SwarmManagerPort": {
        "type": "string",
        "value": "2375"
      },
      "MesosDashBoardPort": {
        "type": "string",
        "value": "5050"
      }
    }
  }
